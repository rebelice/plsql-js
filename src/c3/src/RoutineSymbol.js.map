{"version":3,"file":"RoutineSymbol.js","sourceRoot":"","sources":["../../src/RoutineSymbol.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,uDAAoD;AACpD,iDAA8C;AAC9C,qDAAkD;AAGlD,4CAA4C;AAC5C,MAAa,aAAc,SAAQ,2BAAY;IACpC,UAAU,CAAS,CAAC,iCAAiC;IAE5D,YAAmB,IAAY,EAAE,UAAkB;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAEM,YAAY,CAAC,UAAU,GAAG,IAAI;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,+BAAc,CAAC,CAAC;IACjD,CAAC;IAEM,aAAa,CAAC,UAAU,GAAG,IAAI;QAClC,OAAO,IAAI,CAAC,gBAAgB,CAAC,iCAAe,CAAC,CAAC;IAClD,CAAC;CACJ;AAfD,sCAeC","sourcesContent":["/*\n * Copyright (c) Mike Lischke. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { ParameterSymbol } from \"./ParameterSymbol\";\nimport { ScopedSymbol } from \"./ScopedSymbol\";\nimport { VariableSymbol } from \"./VariableSymbol\";\nimport { IType } from \"./types\";\n\n/** A standalone function/procedure/rule. */\nexport class RoutineSymbol extends ScopedSymbol {\n    public returnType?: IType; // Can be null if result is void.\n\n    public constructor(name: string, returnType?: IType) {\n        super(name);\n        this.returnType = returnType;\n    }\n\n    public getVariables(_localOnly = true): Promise<VariableSymbol[]> {\n        return this.getSymbolsOfType(VariableSymbol);\n    }\n\n    public getParameters(_localOnly = true): Promise<ParameterSymbol[]> {\n        return this.getSymbolsOfType(ParameterSymbol);\n    }\n}\n"]}