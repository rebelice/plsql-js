{"version":3,"file":"MethodSymbol.js","sourceRoot":"","sources":["../../src/MethodSymbol.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,mDAAgD;AAEhD,IAAY,WAWX;AAXD,WAAY,WAAW;IACnB,6CAAQ,CAAA;IACR,mDAAW,CAAA;IACX,+CAAS,CAAA;IACT,2DAAe,CAAA;IAEf,wCAAwC;IACxC,iEAAkB,CAAA;IAElB,yDAAyD;IACzD,sDAAa,CAAA;AACjB,CAAC,EAXW,WAAW,2BAAX,WAAW,QAWtB;AAED,8EAA8E;AAC9E,MAAa,YAAa,SAAQ,6BAAa;IACpC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC;CACzC;AAFD,oCAEC","sourcesContent":["/*\n * Copyright (c) Mike Lischke. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { RoutineSymbol } from \"./RoutineSymbol\";\n\nexport enum MethodFlags {\n    None = 0,\n    Virtual = 1,\n    Const = 2,\n    Overwritten = 4,\n\n    /** Distinguished by the return type. */\n    SetterOrGetter = 8,\n\n    /** Special flag used e.g. in C++ for explicit c-tors. */\n    Explicit = 16,\n}\n\n/** A function which belongs to a class or other outer container structure. */\nexport class MethodSymbol extends RoutineSymbol {\n    public methodFlags = MethodFlags.None;\n}\n"]}