{"version":3,"file":"FundamentalType.js","sourceRoot":"","sources":["../../src/FundamentalType.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,mCAAyD;AAEzD,2FAA2F;AAC3F,MAAa,eAAe;IACjB,MAAM,CAAU,WAAW,GAAG,IAAI,eAAe,CAAC,KAAK,EAAE,gBAAQ,CAAC,OAAO,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;IACnG,MAAM,CAAU,SAAS,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,gBAAQ,CAAC,KAAK,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;IACjG,MAAM,CAAU,UAAU,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,gBAAQ,CAAC,MAAM,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;IACpG,MAAM,CAAU,QAAQ,GAAG,IAAI,eAAe,CAAC,MAAM,EAAE,gBAAQ,CAAC,OAAO,EAAE,qBAAa,CAAC,QAAQ,CAAC,CAAC;IAEjG,IAAI,CAAS;IAEZ,QAAQ,CAAW;IACnB,aAAa,CAAgB;IAErC,YAAmB,IAAY,EAAE,QAAQ,GAAG,gBAAQ,CAAC,OAAO,EAAE,aAAa,GAAG,qBAAa,CAAC,UAAU;QAClG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,EAAE,CAAC;IACd,CAAC;IAED,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;;AA3BL,0CA4BC","sourcesContent":["/*\n * Copyright (c) Mike Lischke. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { IType, TypeKind, ReferenceKind } from \"./types\";\n\n/** A single class for all fundamental types. They are distinguished via the kind field. */\nexport class FundamentalType implements IType {\n    public static readonly integerType = new FundamentalType(\"int\", TypeKind.Integer, ReferenceKind.Instance);\n    public static readonly floatType = new FundamentalType(\"float\", TypeKind.Float, ReferenceKind.Instance);\n    public static readonly stringType = new FundamentalType(\"string\", TypeKind.String, ReferenceKind.Instance);\n    public static readonly boolType = new FundamentalType(\"bool\", TypeKind.Boolean, ReferenceKind.Instance);\n\n    public name: string;\n\n    private typeKind: TypeKind;\n    private referenceKind: ReferenceKind;\n\n    public constructor(name: string, typeKind = TypeKind.Unknown, referenceKind = ReferenceKind.Irrelevant) {\n        this.name = name;\n        this.typeKind = typeKind;\n        this.referenceKind = referenceKind;\n    }\n\n    public get baseTypes(): IType[] {\n        return [];\n    }\n\n    public get kind(): TypeKind {\n        return this.typeKind;\n    }\n\n    public get reference(): ReferenceKind {\n        return this.referenceKind;\n    }\n}\n"]}