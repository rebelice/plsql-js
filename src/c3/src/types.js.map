{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAIH,0DAA0D;AAC1D,IAAY,gBAwBX;AAxBD,WAAY,gBAAgB;IACxB,+DAA+D;IAC/D,6DAAO,CAAA;IAEP,yFAAyF;IACzF,uDAAI,CAAA;IAEJ,8DAA8D;IAC9D,2DAAM,CAAA;IAEN,6EAA6E;IAC7E,iEAAS,CAAA;IAET,2DAA2D;IAC3D,6DAAO,CAAA;IAEP;;;OAGG;IACH,qEAAW,CAAA;IAEX,qCAAqC;IACrC,6DAAO,CAAA;AACX,CAAC,EAxBW,gBAAgB,gCAAhB,gBAAgB,QAwB3B;AAED,uCAAuC;AACvC,IAAY,QASX;AATD,WAAY,QAAQ;IAChB,2CAAM,CAAA;IACN,yCAAK,CAAA;IACL,2CAAM,CAAA;IACN,+CAAQ,CAAA;IACR,mDAAU,CAAA;IACV,6CAAO,CAAA;IACP,yCAAK,CAAA;IACL,qDAAW,CAAA;AACf,CAAC,EATW,QAAQ,wBAAR,QAAQ,QASnB;AAED,sCAAsC;AACtC,IAAY,QAmBX;AAnBD,WAAY,QAAQ;IAChB,6CAAO,CAAA;IAEP,6CAAO,CAAA;IACP,yCAAK,CAAA;IACL,2CAAM,CAAA;IAEN,2CAAM,CAAA;IACN,uCAAI,CAAA;IAEJ,6CAAO,CAAA;IAEP,yCAAK,CAAA;IACL,iDAAS,CAAA;IACT,yCAAK,CAAA;IACL,sCAAG,CAAA;IACH,wCAAI,CAAA;IAEJ,0CAAK,CAAA;AACT,CAAC,EAnBW,QAAQ,wBAAR,QAAQ,QAmBnB;AAED,uCAAuC;AACvC,IAAY,aAWX;AAXD,WAAY,aAAa;IACrB,6DAAU,CAAA;IAEV,oFAAoF;IACpF,uDAAO,CAAA;IAEP,iFAAiF;IACjF,2DAAS,CAAA;IAET,sDAAsD;IACtD,yDAAQ,CAAA;AACZ,CAAC,EAXW,aAAa,6BAAb,aAAa,QAWxB","sourcesContent":["/*\n * Copyright (c) Mike Lischke. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { BaseSymbol } from \"./BaseSymbol\";\n\n/** Visibility (aka. accessibility) of a symbol member. */\nexport enum MemberVisibility {\n    /** Not specified, default depends on the language and type. */\n    Unknown,\n\n    /** Used in Swift, member can be accessed outside of the defining module and extended. */\n    Open,\n\n    /** Like Open, but in Swift such a type cannot be extended. */\n    Public,\n\n    /** Member is only accessible in the defining class and any derived class. */\n    Protected,\n\n    /** Member can only be accessed from the defining class. */\n    Private,\n\n    /**\n     * Used in Swift and Java, member can be accessed from everywhere in a defining module, not outside however.\n     * Also known as package private.\n     */\n    FilePrivate,\n\n    /** Custom enum for special usage. */\n    Library,\n}\n\n/** The modifier of a symbol member. */\nexport enum Modifier {\n    Static,\n    Final,\n    Sealed,\n    Abstract,\n    Deprecated,\n    Virtual,\n    Const,\n    Overwritten,\n}\n\n/** Rough categorization of a type. */\nexport enum TypeKind {\n    Unknown,\n\n    Integer,\n    Float,\n    Number,\n\n    String,\n    Char,\n\n    Boolean,\n\n    Class,\n    Interface,\n    Array,\n    Map,\n    Enum,\n\n    Alias,\n}\n\n/** Describes a reference to a type. */\nexport enum ReferenceKind {\n    Irrelevant,\n\n    /** Default for most languages for dynamically allocated memory (\"Type*\" in C++). */\n    Pointer,\n\n    /** \"Type&\" in C++, all non-primitive types in Java/Javascript/Typescript etc. */\n    Reference,\n\n    /** \"Type\" as such and default for all value types. */\n    Instance,\n}\n\n/** The root type interface. Used for typed symbols and type aliases. */\nexport interface IType {\n    name: string;\n\n    /**\n     * The super type of this type or empty if this is a fundamental type.\n     * Also used as the target type for type aliases.\n     */\n    baseTypes: IType[];\n    kind: TypeKind;\n    reference: ReferenceKind;\n}\n\nexport interface ISymbolTableOptions {\n    allowDuplicateSymbols?: boolean;\n}\n\n/** The type of constructors for symbols. Used mostly for factory and lookup functions. */\nexport type SymbolConstructor<T extends BaseSymbol, Args extends unknown[]> = new (...args: Args) => T;\n"]}