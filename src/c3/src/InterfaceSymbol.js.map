{"version":3,"file":"InterfaceSymbol.js","sourceRoot":"","sources":["../../src/InterfaceSymbol.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,mCAAyD;AAGzD,+CAA4C;AAC5C,iDAA8C;AAC9C,iDAA8C;AAE9C,MAAa,eAAgB,SAAQ,2BAAY;IACtC,SAAS,GAAG,qBAAa,CAAC,UAAU,CAAC;IAE5C,6EAA6E;IAC7E,gDAAgD;IAChC,OAAO,CAAuC;IAE9D,YAAmB,IAAY,EAAE,GAAyC;QACtE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACvB,CAAC;IAED,IAAW,SAAS,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACxD,IAAW,IAAI,KAAe,OAAO,gBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAE1D;;;;OAIG;IACI,UAAU,CAAC,iBAAiB,GAAG,KAAK;QACvC,OAAO,IAAI,CAAC,gBAAgB,CAAC,2BAAY,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACI,SAAS,CAAC,iBAAiB,GAAG,KAAK;QACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,yBAAW,CAAC,CAAC;IAC9C,CAAC;CACJ;AAhCD,0CAgCC","sourcesContent":["/*\n * Copyright (c) Mike Lischke. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { IType, ReferenceKind, TypeKind } from \"./types\";\n\nimport { ClassSymbol } from \"./ClassSymbol\";\nimport { FieldSymbol } from \"./FieldSymbol\";\nimport { MethodSymbol } from \"./MethodSymbol\";\nimport { ScopedSymbol } from \"./ScopedSymbol\";\n\nexport class InterfaceSymbol extends ScopedSymbol implements IType {\n    public reference = ReferenceKind.Irrelevant;\n\n    /** Typescript allows an interface to extend a class, not only interfaces. */\n    // eslint-disable-next-line no-use-before-define\n    public readonly extends: Array<ClassSymbol | InterfaceSymbol>;\n\n    public constructor(name: string, ext: Array<ClassSymbol | InterfaceSymbol>) {\n        super(name);\n        this.extends = ext;\n    }\n\n    public get baseTypes(): IType[] { return this.extends; }\n    public get kind(): TypeKind { return TypeKind.Interface; }\n\n    /**\n     * @param _includeInherited not used\n     *\n     * @returns a list of all methods.\n     */\n    public getMethods(_includeInherited = false): Promise<MethodSymbol[]> {\n        return this.getSymbolsOfType(MethodSymbol);\n    }\n\n    /**\n     * @param _includeInherited Not used.\n     *\n     * @returns all fields.\n     */\n    public getFields(_includeInherited = false): Promise<FieldSymbol[]> {\n        return this.getSymbolsOfType(FieldSymbol);\n    }\n}\n"]}